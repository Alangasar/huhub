<?php

/**
 * @file
 * Main code.
 */

// Tracking messages config.
module_load_include('inc', 'druio', 'includes/druio.messages');

/**
 * Implements hook_flag_flag().
 */
function druio_flag_flag($flag, $entity_id, $account, $flagging) {
  if ($flag->name == 'best_answer') {

    $answers = db_select('field_data_field_answer_question_reference', 'er')
      ->fields('er', array('entity_id'))
      ->condition('er.entity_type', 'node')
      ->condition('er.bundle', 'answer')
      ->condition('er.field_answer_question_reference_target_id', $entity_id)
      ->execute();

    // Unflag all others.
    if (!empty($answers)) {
      $flag = flag_get_flag('best_answer');

      foreach ($answers as $answer) {
        if ($answer->entity_id != $entity_id) {
          $flag->flag('unflag', $answer->entity_id);
        }
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function druio_form_alter(&$form, &$form_state, $form_id) {

  // Disable formatting tips for comments.
  if (in_array($form_id, array(
    'comment_node_question_form',
    'comment_node_post_form',
  ))) {
    $form['comment_body']['#after_build'][] = 'druio_form_remove_formatting_tips';
  }

  // Disable formatting tips for nodes.
  if (in_array($form_id, array(
    'question_node_form',
    'post_node_form',
    'answer_node_form',
  ))) {
    $form['body']['#after_build'][] = 'druio_form_remove_formatting_tips';
  }

  // Add default project reference to question.
  if ($form_id == 'question_node_form' && !empty($_GET['project'])) {
    $project_nid = (int) $_GET['project'];
    if ($entity_node = node_load($project_nid)) {
      $form['field_project_reference'][LANGUAGE_NONE]['#default_value'] = $entity_node->title . ' (' . $entity_node->nid . ')';
    }
  }

  // If Answer Node form.
  if ($form_id == 'answer_node_form') {
    if (arg(0) == 'node' && arg(1) == 'add' && arg(2) == 'answer') {
      drupal_set_message('Ответы можно добавлять только к вопросам.', 'warning');
      // @todo: редирект нужно делать раньше, не в форме.
      drupal_goto('/question');
    }
    // Make title not required and hide it.
    $form['title']['#required'] = FALSE;
    hide($form['title']);

    $answer_nid = arg(1);
    $form['title']['#value'] = "Ответ №{$answer_nid}";

    // Hide field reference to question.
    hide($form['field_answer_question_reference']);

    // Set default reference to question when adding new answer.
    if (empty($form['field_answer_question_reference'][LANGUAGE_NONE][0]['target_id']['#default_value'])) {
      if ($question = node_load($answer_nid)) {
        $form['field_answer_question_reference'][LANGUAGE_NONE][0]['target_id']['#default_value'] = "{$question->title} ({$question->nid})";
      }
      // $form['field_answer_question_reference'][LANGUAGE_NONE]['#default_value'] = $question->nid;
    }

    // Check if user has access to node creation.
    if (!user_access('create answer content')) {
      $form['#access'] = FALSE;
    }
  }
}

/**
 * Remove formating tips for comments.
 *
 * @param object $form
 *
 * @return mixed
 */
function druio_form_remove_formatting_tips(&$form) {
  $form[LANGUAGE_NONE][0]['format']['#access'] = FALSE;

  return $form;
}

/**
 * Return has or not question best answer.
 *
 * @param int $nid
 *
 * @return bool
 */
function druio_question_is_best_answer($nid) {
  $answers = db_select('field_data_field_answer_question_reference', 'er')
    ->fields('er', array('entity_id'))
    ->condition('er.entity_type', 'node')
    ->condition('er.bundle', 'answer')
    ->condition('er.field_answer_question_reference_target_id', $nid)
    ->execute();

  $is_best_answer = FALSE;
  if (!empty($answers)) {
    foreach ($answers as $answer) {
      // @todo: переписать в запрос джойном с flag_counts.
      if (flag_get_counts('node', $answer->entity_id)) {
        $is_best_answer = TRUE;
        break;
      }
    }
  }

  return $is_best_answer;
}

/**
 * Returns count of answers.
 *
 * @param int $nid
 *
 * @return mixed
 */
function druio_question_answers_count($nid) {
  $answers = db_select('field_data_field_answer_question_reference', 'er');
  $answers->addExpression('COUNT(*)');
  $answers->join('node', 'n', 'n.nid = er.entity_id');
  $answers->condition('n.status', 1);
  $answers->condition('er.entity_type', 'node');
  $answers->condition('er.bundle', 'answer');
  $answers->condition('er.field_answer_question_reference_target_id', $nid);
  $result = $answers->execute()->fetchField();

  return $result;
}

/**
 * Is user answered to this question before.
 *
 * @param int $qid
 * @param int $uid
 *
 * @return bool
 */
function druio_is_user_answered_to_question($qid, $uid) {
  // Default value.
  $result = FALSE;

  // Get all answers to question.
  $query = db_select('field_data_field_answer_question_reference', 'qr');
  $query->condition('qr.entity_type', 'node');
  $query->condition('qr.bundle', 'answer');
  $query->condition('qr.field_answer_question_reference_target_id', $qid);
  $query->fields('qr', array('entity_id'));
  $answers = $query->execute()->fetchAllAssoc('entity_id');

  // If answers exists.
  if (!empty($answers)) {
    // Prepare answer id's.
    $aids = array_keys($answers);
    // Check whether the user is the author of at least one of the answers.
    $query = db_select('node', 'n');
    $query->fields('n');
    $query->condition('n.uid', $uid);
    $query->condition('n.nid', $aids, 'IN');
    $query->countQuery();
    $result = $query->execute()->fetchField();
  }

  return (bool) $result;
}

/**
 * Implements hook_block_info().
 *
 * @return mixed
 */
function druio_block_info() {
  $blocks['add_content_buttons'] = array(
    'info' => 'Кнопки добавления содержимого',
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function druio_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'add_content_buttons':
      $block['subject'] = '';
      $block['content'] = array(
        '#theme' => 'add_content_buttons',
      );
      break;
  }

  return $block;
}

/**
 * Implements hook_theme().
 */
function druio_theme() {
  return array(
    'add_content_buttons' => array(
      'template' => 'templates/add-content-buttons',
      'render element' => 'theme',
    ),
  );
}

/**
 * Remove "log in to post comment".
 *
 * @param object $comment
 * @param string $view_mode
 * @param string $langcode
 */
function druio_comment_view($comment, $view_mode, $langcode) {
  unset($comment->content['links']['comment']['#links']['comment_forbidden']);
}

/**
 * Plural function for Russian words.
 * @param $number
 * @param $endingArray
 * @return
 */
function druio_russian_plural($number, $endingArray) {
  $number = abs($number) % 100;
  if ($number >= 11 && $number <= 19) {
    $ending = $endingArray[2];
  }
  else {
    $i = $number % 10;
    switch ($i) {
      case (0):
        $ending = $endingArray[2];
        break;
      case (1):
        $ending = $endingArray[0];
        break;
      case (2):
      case (3):
      case (4):
        $ending = $endingArray[1];
        break;
      default:
        $ending = $endingArray[2];
    }
  }
  return $ending;
}

/**
 * Return url to user picture (avatar).
 * @param $uid
 * @param string $image_style
 * @return string
 */
function druio_get_user_picture($uid, $image_style = NULL) {
  $user = user_load($uid);
  if ($user->picture) {
    if ($image_style) {
      return image_style_url($image_style, $user->picture->uri);
    }
    else {
      return file_Create_url($user->picture->uri);
    }
  }
  else {
    return '/' . variable_get('user_picture_default', '');
  }
}
