<?php

define('DRUIO_RATING_VALUE_FOR_USER_BLOCK', -50);
define('DRUIO_RATING_VALUE_FOR_DEPUBLISH_NODE', -9);

/*
 * Rating calculation
 * @param integer $uid
 * @return integer
 */

function druio_rating_count($uid) {
  $vote_query = db_select('votingapi_vote', 'v')
    ->fields('v', array('entity_id', 'value', 'value_type'));
  $vote_query->innerJoin('node', 'n', 'n.nid = v.entity_id');
  $vote_query->condition('n.uid', $uid)
    ->addExpression('SUM(value)');

  $votes = $vote_query->execute()->fetchObject()->expression;

  $flag_type = 3;
  $answer_query =  db_select('flagging', 'f')
    ->fields('f', array('fid', 'entity_id'))
    ->condition('f.fid', $flag_type);
  $answer_query->innerJoin('node', 'n', 'n.nid = f.entity_id');
  $answer_query->condition('n.uid', $uid);

  $answers = count($answer_query->execute()->fetchAll());


  $rating = $votes + $answers * 2;
  return $rating;
}


/**
 * Implements hook_cronapi().
 */

function druio_rating_cronapi() {
  $items = array();
  $items['druio_rating_create_queue'] = array();
  return $items;
}

function druio_rating_create_queue() {
  $queue = DrupalQueue::get("user_rating");
  $query = db_select('users', 'u');
  $users = $query
    ->fields('u', array('uid'))
    ->execute()
    ->fetchAll();

  foreach ($users as $user) {
    $queue->createItem((array) $user);
  }
}

function druio_rating_cron_queue_info() {
  $queues['user_rating'] = array (
    'worker callback' => 'druio_rating_worker_queue',
    'time' => 60,    // Time, in seconds, to let this process run [Optional]
  );
  return $queues;
}

function druio_rating_worker_queue($user) {
  $uid = $user['uid'];
  if($uid) {
    $user_wrapper = entity_metadata_wrapper('user', $uid);
    $user_wrapper->field_user_rating = druio_rating_count($uid);
    $user_wrapper->save();
  }
  watchdog('rating', 'Done uid @nid', array('@uid' => $user['uid']));
}

/*
 * Implements hook_form_alter()
 */

function druio_rating_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'user_profile_form') {
    $form['field_user_rating']['#disabled'] = TRUE;
  }
}

/**
 * Returns current user rating.
 * @param $user - UID or user Object.
 * @return int
 */
function druio_rating_get_user_rating($user) {
  $wrapper = entity_metadata_wrapper('user', $user);
  if ($rating = $wrapper->field_user_rating->value()) {
    return $rating;
  }
  else {
    return 0;
  }
}

/*
 * Implements hook_rate_vote_alter()
 */

function druio_rating_rate_vote_alter($vote, $context) {
  // Block users with low rating
  if ($vote['value'] == -1 && $vote['entity_type'] == 'node') {
    $entity = entity_metadata_wrapper('node', $vote['entity_id']);
    $rating = $entity->author->field_user_rating->value();
    $votingapi_results = votingapi_select_results(array(
      'entity_type' => 'node',
      'entity_id' => $vote['entity_id'],
      'tag' => $vote['tag'],
      'value_type' => $vote['value_type'],
    ));
    $sum_node_rating = $votingapi_results[2]['value'];

    // block user (pending till official rules)
    /* if ($rating < DRUIO_RATING_VALUE_FOR_USER_BLOCK) {
       $entity->author->status->set('0');
       $entity->author->save();
    }*/

    // depublish node
    if (isset($sum_node_rating) && $sum_node_rating < DRUIO_RATING_VALUE_FOR_DEPUBLISH_NODE) {
      $entity->status->set('0');
      $entity->save();
    }
  }
}
