<?php
/**
 * @file
 * Main code.
 */


 /*
  * Tracking messages config
  */

include __DIR__ . '/dlcommunity_messages.inc';

/**
 * Implements hook_menu().
 */
function dlcommunity_menu() {
  $items = array();

  $items['dlcommunity/project/ajax-add'] = array(
    'page callback' => 'dlcommunity_project_ajax_add',
    'access callback' => TRUE,
  );

  $items['dlcommunity/project/update'] = array(
    'page callback' => 'dlcommunity_project_update',
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * Implements hook_flag_flag().
 */
function dlcommunity_flag_flag($flag, $entity_id, $account, $flagging) {
  if ($flag->name == 'best_answer') {

    $answers = db_select('field_data_field_answer_question_reference', 'er')
      ->fields('er', array('entity_id'))
      ->condition('er.entity_type', 'node')
      ->condition('er.bundle', 'answer')
      ->condition('er.field_answer_question_reference_target_id', $entity_id)
      ->execute();

    // Unflag all others.
    if (!empty($answers)) {
      $flag = flag_get_flag('best_answer');

      foreach ($answers as $answer) {
        if ($answer->entity_id != $entity_id) {
          $flag->flag('unflag', $answer->entity_id);
        }
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function dlcommunity_form_alter(&$form, &$form_state, $form_id) {

  // Disable formatting tips for comments.
  if (
    $form_id == 'comment_node_question_form' ||
    $form_id == 'comment_node_post_form'
  ) {
    $form['comment_body']['#after_build'][] = 'dlcommunity_form_remove_formatting_tips';
  }

  // Disable formatting tips for nodes.
  if (
    $form_id == 'question_node_form' ||
    $form_id == 'post_node_form' ||
    $form_id == 'answer_node_form'
  ) {
    $form['body']['#after_build'][] = 'dlcommunity_form_remove_formatting_tips';
  }

  // Add default project reference to question.
  if ($form_id == 'question_node_form') {
    if (!empty($_GET['project'])) {
      $entity_node = node_load($_GET['project']);
      if ($entity_node) {
        $form['field_project_reference'][LANGUAGE_NONE]['#default_value'] = $entity_node->title . ' (' . $entity_node->nid . ')';
      }
    }
  }

  // If Answer Node form.
  if ($form_id == 'answer_node_form') {
    if (arg(0) == 'node' && arg(1) == 'add' && arg(2) == 'answer') {
      drupal_set_message('Ответы можно добавлять только к вопросам.', 'warning');
      global $base_url;
      drupal_goto($base_url . '/question');
    }
    // Make title not required and hide it.
    $form['title']['#required'] = FALSE;
    $form['title']['#value'] = 'Ответ №' . arg(1);
    hide($form['title']);

    // Hide field reference to question.
    hide($form['field_answer_question_reference']);

    // Set default reference to question when adding new answer.
    if (!$form['field_answer_question_reference']['und'][0]['target_id']['#default_value']) {
      $question = node_load(arg(1));

      if ($question) {
        $form['field_answer_question_reference'][LANGUAGE_NONE][0]['target_id']['#default_value'] = "$question->title ($question->nid)";
      }
      //$form['field_answer_question_reference'][LANGUAGE_NONE]['#default_value'] = $question->nid;
    }

    // Check if user has access to node creation.
    if (!user_access('create answer content')) {
      $form['#access'] = FALSE;
    }
  }
}

/**
 * Remove formating tips for comments.
 */
function dlcommunity_form_remove_formatting_tips(&$form) {
  $form[LANGUAGE_NONE][0]['format']['#access'] = FALSE;
  return $form;
}

/**
 * Return has or not question best answer.
 */
function dlcommunity_question_is_best_answer($nid) {
  $answers = db_select('field_data_field_answer_question_reference', 'er')
    ->fields('er', array('entity_id'))
    ->condition('er.entity_type', 'node')
    ->condition('er.bundle', 'answer')
    ->condition('er.field_answer_question_reference_target_id', $nid)
    ->execute();

  $is_best_answer = FALSE;
  if (!empty($answers)) {
    foreach ($answers as $answer) {
      if (flag_get_counts('node', $answer->entity_id)) {
        $is_best_answer = TRUE;
      }
    }
  }

  return $is_best_answer;
}

/**
 * Returns count of answers.
 */
function dlcommunity_question_answers_count($nid) {
  $answers = db_select('field_data_field_answer_question_reference', 'er');
  $answers->addExpression('COUNT(*)');
  $answers->join('node', 'n', 'n.nid = er.entity_id');
  $answers->condition('n.status', 1);
  $answers->condition('er.entity_type', 'node');
  $answers->condition('er.bundle', 'answer');
  $answers->condition('er.field_answer_question_reference_target_id', $nid);
  $result = $answers->execute()->fetchField();

  return $result;
}

/**
 * Is user answered to this question before.
 */
function dlcommunity_is_user_answered_to_question($qid, $uid) {
  // Default value.
  $result = FALSE;

  // Get all answers to question.
  $query = db_select('field_data_field_answer_question_reference', 'qr');
  $query->condition('qr.entity_type', 'node');
  $query->condition('qr.bundle', 'answer');
  $query->condition('qr.field_answer_question_reference_target_id', $qid);
  $query->fields('qr', array('entity_id'));
  $answers = $query->execute()->fetchAllAssoc('entity_id');

  // If answers exists.
  if ($answers) {
    // Prepare answer id's.
    $aid = array();
    foreach ($answers as $nid => $answer) {
      $aid[] = $nid;
    }

    // Check whether the user is the author of at least one of the answers.
    $query = db_select('node', 'n');
    $query->fields('n');
    $query->condition('n.uid', $uid);
    $query->condition('n.nid', $aid, 'IN');
    $query->countQuery();
    $count = $query->execute()->fetchField();

    $count ? $result = TRUE : $result = FALSE;
  }

  return $result;
}

/**
 * Implements hook_block_info().
 */
function dlcommunity_block_info() {
  $blocks['add_content_buttons'] = array(
    'info' => 'Кнопки добавления содержимого',
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function dlcommunity_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'add_content_buttons':
      $block['subject'] = NULL;
      $block['content'] = array(
        '#theme' => 'add_content_buttons',
      );
      break;
  }

  return $block;
}

/**
 * Используем hook_theme().
 *
 * Темизации и шаблоны.
 */
function dlcommunity_theme() {
  return array(
    'add_content_buttons' => array(
      'template' => 'templates/add-content-buttons',
      'render element' => 'theme'
    ),
  );
}

/**
 * Add project via ajax.
 */
function dlcommunity_project_ajax_add() {
  $result = FALSE;

  if (!empty($_POST['project'])) {
    $post = strtolower($_POST['project']);
    $project = new DlcommunityProjects();

    if (filter_var($post, FILTER_VALIDATE_URL)) {
      $project_name = $project->parseProjectNameFromUrl($post);
    }
    else {
      $project_name = $post;
    }

    $add_result = $project->addProject($project_name);

    switch ($add_result) {
      case 1:
        $result = 'Проект успешно добавлен в базу.';
        break;
      case 2:
        $result = 'Drupal.org не отвечает, пропустите добавление, или попробуйте позже';
        break;
      case 3:
        $result = 'Проект уже имеется в нашей базе. ;)';
        break;
    }
  }

  drupal_json_output($result);
  drupal_exit();
}

/**
 * Update project.
 */
function dlcommunity_project_update() {
  $result = FALSE;

  if (!empty($_POST['project'])) {
    $post = strtolower($_POST['project']);
    $project = new DlcommunityProjects();

    if (filter_var($post, FILTER_VALIDATE_URL)) {
      $project_name = $project->parseProjectNameFromUrl($post);
    }
    else {
      $project_name = $post;
    }

    $add_result = $project->updateProject($project_name);

    switch ($add_result) {
      case 1:
        $result = 'Проект успешно добавлен в базу.';
        break;
      case 2:
        $result = 'Drupal.org не отвечает.';
        break;
      case 3:
        $result = 'Проект обновлен.';
        break;
    }
  }

  drupal_json_output($result);
  drupal_exit();
}

/**
 * Class DlcommunityProjects
 * Class for manipulating projects.
 */
class DlcommunityProjects {

  /**
   * Parse project name from url.
   */
  public function parseProjectNameFromUrl($url) {
    $parsed_url = parse_url($url);

    if ($parsed_url['host'] == 'drupal.org' || $parsed_url['host'] == 'www.drupal.org') {
      $path = explode('/', $parsed_url['path']);
      if ($path[1] == 'project' && !empty($path[2])) {
        return $path[2];
      }
      else {
        return FALSE;
      }
    }
    else {
      return FALSE;
    }
  }

  /**
   * @param $name - project machine name.
   * Send request and try to get project info.
   * Return JSON.
   */
  private function sendRequest($name) {
    $ch = curl_init();

    $options = array(
      CURLOPT_URL => 'http://updates.drupal.org/release-history/' . $name . '/all',
      CURLOPT_HEADER => "Content-Type:application/xml",
      CURLOPT_RETURNTRANSFER => TRUE
    );

    curl_setopt_array($ch, $options);
    $data = curl_exec($ch);
    $status = curl_getinfo($ch)['http_code'];

    // If status Ok.
    if ($status == 200) {
      curl_close($ch);

      $xml_element = new SimpleXMLElement($data);
      $json = json_encode($xml_element);
      $array = json_decode($json, TRUE);

      if (count($array) <= 1) {
        // if drupal.org returns: 'No project found';
        return FALSE;
      }
      else {
        return $json;
      }
    }
    else {
      return FALSE;
    }
  }

  /**
   * Add new project.
   * Return DATA:
   * 1 - add successful.
   * 2 - drupal.org not response.
   * 3 - project already exist.
   */
  public function addProject($name) {
    $nodes = db_select('field_data_field_project_short_name', 'sn')
      ->fields('sn', array('entity_id'))
      ->condition('sn.entity_type', 'node', '=')
      ->condition('sn.bundle', 'project', '=')
      ->condition('sn.field_project_short_name_value', $name, '=')
      ->execute()
      ->fetchField();

    // Check if we have project or not.
    if (!empty($nodes)) {
      return 3;
    }
    // Create new project node.
    else {
      $result = $this->sendRequest($name);
      if ($result) {
        $result_array = json_decode($result, TRUE);

        $node = new stdClass();
        $node->type = 'project';
        node_object_prepare($node);

        $node->title = $result_array['title'];
        $node->language = LANGUAGE_NONE;

        $this->generateFieldData($node, $result_array);

        // Save new project.
        node_save($node);

        return 1;
      }
      else {
        return 2;
      }
    }
  }

  /**
   * Update project information.
   * Return DATA:
   * 1 - update successful.
   * 2 - drupal.org not response.
   * 3 - project does not exist.
   */
  public function updateProject($name) {
    $nodes = db_select('field_data_field_project_short_name', 'sn')
      ->fields('sn', array('entity_id'))
      ->condition('sn.entity_type', 'node', '=')
      ->condition('sn.bundle', 'project', '=')
      ->condition('sn.field_project_short_name_value', $name, '=')
      ->execute()
      ->fetchField();

    // Check if we have project or not.
    if (!empty($nodes)) {
      $result = $this->sendRequest($name);
      if ($result) {
        $result_array = json_decode($result, TRUE);

        $node = node_load($nodes);
        $node->title = $result_array['title'];
        $node->language = LANGUAGE_NONE;
        $this->generateFieldData($node, $result_array);
        node_save($node);

        return 1;
      }
      else {
        return 2;
      }
    }
    else {
      return 3;
    }
  }

  /**
   * Set field data.
   */
  private function generateFieldData(&$node, $data_array) {
    // Set terms
    foreach ($data_array['terms']['term'] as $term) {

      if ($term['name'] == 'Projects') {
        switch ($term['value']) {
          case 'Modules':
            $node->field_project_type[$node->language][0]['tid'] = 26;
            break;
          case 'Themes':
            $node->field_project_type[$node->language][0]['tid'] = 27;
            break;
          case 'Distributions':
            $node->field_project_type[$node->language][0]['tid'] = 25;
            break;
          case 'Drupal core':
            $node->field_project_type[$node->language][0]['tid'] = 24;
            break;
        }
      }
      elseif ($term['name'] == 'Maintenance status') {
        $term_load = taxonomy_get_term_by_name($term['value'], 'project_maintenance_status');
        if ($term_load) {
          $term_load = array_shift($term_load);
          $node->field_project_maintenance_status[$node->language][0]['tid'] = $term_load->tid;
        }
      }
      elseif ($term['name'] == 'Development status') {
        $term_load = taxonomy_get_term_by_name($term['value'], 'project_development_status');
        if ($term_load) {
          $term_load = array_shift($term_load);
          $node->field_project_development_status[$node->language][0]['tid'] = $term_load->tid;
        }
      }

      // Releases
      $releases_array = array();
      foreach ($data_array['releases']['release'] as $release) {
        preg_match('/(.\\..)/', $release['version'], $version);
        $releases_array[$version[0]][$release['version']] = array(
          'version' => $release['version'],
          'release_link' => $release['release_link'],
          'date' => $release['date'],
          'files' => array(
            'zip' => array(
              'url' => $release['files']['file'][0]['url'],
              'md5' => $release['files']['file'][0]['md5'],
              'size' => $release['files']['file'][0]['size'],
              'date' => $release['files']['file'][0]['filedate']
            ),
            'tar' => array(
              'url' => $release['files']['file'][0]['url'],
              'md5' => $release['files']['file'][0]['md5'],
              'size' => $release['files']['file'][0]['size'],
              'date' => $release['files']['file'][0]['filedate']
            ),
          )
        );
      }
      $node->field_project_releases[$node->language][0]['value'] = json_encode($releases_array);
    }

    // Drupal version
    foreach ($releases_array as $drupal_version => $release) {
      $term_load = taxonomy_get_term_by_name($drupal_version, 'drupal_versions');
      if ($term_load) {
        $term_load = array_shift($term_load);
        $node->field_drupal_version[$node->language][]['tid'] = $term_load->tid;
      }
    }

    // Other fields
    $node->field_project_short_name[$node->language][0]['value'] = $data_array['short_name'];
  }

}
